import string

union MyType {
    Foo(Int)
    Bar
    Fizz(String, Float)
}

struct Point {
    Int x
    Int y
}

(Int, Int) -> Point
fn new(x, y) {
    return Point {
        .x = x
        .y = y
    }
}

(MyType) -> String
fn repr(self) {
    match self {
        Foo(i) => {
            string.format("Foo({})", repr(i))
        },
        Bar => "Bar"
    }
}

(Point) -> String
fn repr(self) {
    return string.format("Point({}, {})", self.x, self.y)
}

(Point, Point) -> Bool
fn infix "==" (self, other) {
    return self.x == other.x and self.y == other.y
}

(Point, Point) -> Point
fn infix "+" (self, other) {
    return Point {
        .x = self.x + other.x
        .y = self.y + other.y
    }
}

fn my_func(my_var) {
    y = if my_var > 3 {
        return 5
    } else {
        return 6
    }
}

(Int) -> List(Int)
fn lazy(max_n) {
    acc = 1
    prev = 0
    for i, num in enumerate(range(max_n)) {
        if i <= max_n {
            yield acc
            next_n = prev + acc
            prev = acc
            acc = next_n
        } else {
            break
        }
    }
}

fn main(args) {
    for i in lazy(100) {
        print(i)
    }
}
